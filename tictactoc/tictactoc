#include <iostream>
#include<ctime>
using namespace std;

void reset(int list[3][3]); // 초기화 함수
void ttt(int list[3][3], int n);// 틱택토 메인
void ttt_user(int list[3][3]);// 유저놓기(1p)
void ttt_user_2p(int list[3][3]);// 유저놓기(2p)
void ttt_computer(int list[3][3]);// 컴퓨터 놓기
int check(int list[3][3]);//게임 보드 출력
void display(int list[3][3]);// 현재 상태 체크
void result(); // 결과 출력

int win=0;// 승리
int draw=0;// 무승부
int lose=0;// 패배

int main()
{
	int list[3][3];
	int k;

	cout << "어떤 게임을 하시겠습니까?(0:유저간 경기 , 1:컴퓨터와 경기, ctrl+Z:종료) >>";
	while (cin >> k) {
		reset(list); // 게임 초기화
		ttt(list, k);
	}

	result();// 결과 출력

	return 0;
}

void reset(int list[3][3]) {
	list[0][0] = 3;
	list[0][1] = 2;
	list[0][2] = 3;
	list[1][0] = 2;
	list[1][1] = 4;
	list[1][2] = 2;
	list[2][0] = 3;
	list[2][1] = 2;
	list[2][2] = 3;
}

void ttt(int list[3][3], int n) {
	int state;
	if (n == 0) do { // 유저간 경기
		ttt_user(list);
		state = check(list);
		if (state == 3) {
			display(list);
			ttt_user_2p(list);
			state = check(list);
		}
		display(list);
	} while (state == 3);
	if (n == 1) do { // 컴퓨터와 경기
		ttt_user(list);
		state = check(list);
		if (state == 3) {
			ttt_computer(list);
			state = check(list);
		}
		display(list);
	} while (state == 3);

	if (state == 0) {
		cout << "(1p) 승리하였습니다." << endl;
		win++;
	}
	else if (state == 1) {
		cout << "(1p) 패배하였습니다." << endl;
		lose++;
	}
	else {
		cout << "(1p) 무승부하였습니다." << endl;
		draw++;
	}

	cout << "다시 게임을 하시겠습니까?(0:유저간 경기 , 1:컴퓨터와 경기, ctrl+Z:종료) >>";
}

// 유저 놓기
void ttt_user(int list[3][3]) {
	int x, y;
	do {
		cout << "(1p)놓을 위치를 입력해주세요(O) : ";
		cin >> x >> y;
	} while (list[x][y] < 2);
	list[x][y] = 0;
}
void ttt_user_2p(int list[3][3]) {
	int x, y;
	do {
		cout << "(2p)놓을 위치를 입력해주세요(X) : ";
		cin >> x >> y;
	} while (list[x][y] < 2);
	list[x][y] = 1;
}

/// 컴퓨터 놓기
void ttt_computer(int list[3][3]) {
	////////////// 컴퓨터 우선순위 확인
	//가로줄 1
	if (list[0][0] == 1 && list[0][1] == 1 && list[0][2] > 1) list[0][2] = 6;
	else if (list[0][1] == 1 && list[0][2] == 1 && list[0][0] > 1) list[0][0] = 6;
	else if (list[0][0] == 1 && list[0][2] == 1 && list[0][1] > 1) list[0][1] = 6;
	//가로줄 2
	else if (list[1][0] == 1 && list[1][1] == 1 && list[1][2] > 1) list[1][2] = 6;
	else if (list[1][1] == 1 && list[1][2] == 1 && list[1][0] > 1) list[1][0] = 6;
	else if (list[1][0] == 1 && list[1][2] == 1 && list[1][1] > 1) list[1][1] = 6;
	//가로줄 3
	else if (list[2][0] == 1 && list[2][1] == 1 && list[2][2] > 1) list[2][2] = 6;
	else if (list[2][1] == 1 && list[2][2] == 1 && list[2][0] > 1) list[2][0] = 6;
	else if (list[2][0] == 1 && list[2][2] == 1 && list[2][1] > 1) list[2][1] = 6;
	//세로줄 1
	else if (list[0][0] == 1 && list[1][0] == 1 && list[2][0] > 1) list[2][0] = 6;
	else if (list[0][0] == 1 && list[2][0] == 1 && list[1][0] > 1) list[1][0] = 6;
	else if (list[1][0] == 1 && list[2][0] == 1 && list[0][0] > 1) list[0][0] = 6;
	//세로줄 2
	else if (list[0][1] == 1 && list[1][1] == 1 && list[2][1] > 1) list[2][1] = 6;
	else if (list[0][1] == 1 && list[2][1] == 1 && list[1][1] > 1) list[1][1] = 6;
	else if (list[1][1] == 1 && list[2][1] == 1 && list[0][1] > 1) list[0][1] = 6;
	//세로줄 3
	else if (list[0][2] == 1 && list[1][2] == 1 && list[2][2] > 1) list[2][2] = 6;
	else if (list[0][2] == 1 && list[2][2] == 1 && list[1][2] > 1) list[1][2] = 6;
	else if (list[1][2] == 1 && list[2][2] == 1 && list[0][2] > 1) list[0][2] = 6;
	//대각선 1
	else if (list[0][0] == 1 && list[1][1] == 1 && list[2][2] > 1) list[2][2] = 6;
	else if (list[0][0] == 1 && list[2][2] == 1 && list[1][1] > 1) list[1][1] = 6;
	else if (list[1][1] == 1 && list[2][2] == 1 && list[0][0] > 1) list[0][0] = 6;
	//대각선 2
	else if (list[0][2] == 1 && list[1][1] == 1 && list[2][0] > 1) list[2][0] = 6;
	else if (list[0][2] == 1 && list[2][0] == 1 && list[1][1] > 1) list[1][1] = 6;
	else if (list[1][1] == 1 && list[2][0] == 1 && list[0][2] > 1) list[0][2] = 6;
	////////////// 유저 우선순위 확인
	//가로줄 1
	else if (list[0][0] == 0 && list[0][1] == 0 && list[0][2] > 1) list[0][2] = 5;
	else if (list[0][1] == 0 && list[0][2] == 0 && list[0][0] > 1) list[0][0] = 5;
	else if (list[0][0] == 0 && list[0][2] == 0 && list[0][1] > 1) list[0][1] = 5;
	//가로줄 2
	else if (list[1][0] == 0 && list[1][1] == 0 && list[1][2] > 1) list[1][2] = 5;
	else if (list[1][1] == 0 && list[1][2] == 0 && list[1][0] > 1) list[1][0] = 5;
	else if (list[1][0] == 0 && list[1][2] == 0 && list[1][1] > 1) list[1][1] = 5;
	//가로줄 3
	else if (list[2][0] == 0 && list[2][1] == 0 && list[2][2] > 1) list[2][2] = 5;
	else if (list[2][1] == 0 && list[2][2] == 0 && list[2][0] > 1) list[2][0] = 5;
	else if (list[2][0] == 0 && list[2][2] == 0 && list[2][1] > 1) list[2][1] = 5;
	//세로줄 1
	else if (list[0][0] == 0 && list[1][0] == 0 && list[2][0] > 1) list[2][0] = 5;
	else if (list[0][0] == 0 && list[2][0] == 0 && list[1][0] > 1) list[1][0] = 5;
	else if (list[1][0] == 0 && list[2][0] == 0 && list[0][0] > 1) list[0][0] = 5;
	//세로줄 2
	else if (list[0][1] == 0 && list[1][1] == 0 && list[2][1] > 1) list[2][1] = 5;
	else if (list[0][1] == 0 && list[2][1] == 0 && list[1][1] > 1) list[1][1] = 5;
	else if (list[1][1] == 0 && list[2][1] == 0 && list[0][1] > 1) list[0][1] = 5;
	//세로줄 3
	else if (list[0][2] == 0 && list[1][2] == 0 && list[2][2] > 1) list[2][2] = 5;
	else if (list[0][2] == 0 && list[2][2] == 0 && list[1][2] > 1) list[1][2] = 5;
	else if (list[1][2] == 0 && list[2][2] == 0 && list[0][2] > 1) list[0][2] = 5;
	//대각선 1
	else if (list[0][0] == 0 && list[1][1] == 0 && list[2][2] > 1) list[2][2] = 5;
	else if (list[0][0] == 0 && list[2][2] == 0 && list[1][1] > 1) list[1][1] = 5;
	else if (list[1][1] == 0 && list[2][2] == 0 && list[0][0] > 1) list[0][0] = 5;
	//대각선 2
	else if (list[0][2] == 0 && list[1][1] == 0 && list[2][0] > 1) list[2][0] = 5;
	else if (list[0][2] == 0 && list[2][0] == 0 && list[1][1] > 1) list[1][1] = 5;
	else if (list[1][1] == 0 && list[2][0] == 0 && list[0][2] > 1) list[0][2] = 5;

	int i, j, k, check_xy = 0;
	for (i = 6; i > 1; i--) { // 우선순위 높은 위치 찾기
		for (j = 0; j < 3; j++) {
			if (check_xy == 0) {
				for (k = 0; k < 3; k++)
					if (list[j][k] == i) {
						list[j][k] = 1;
						check_xy = 1;
						break;
					}
			}
			if (check_xy == 1)
				break;
		}
		if (check_xy == 1) {
			break;
		}
	}
}

// 검증 함수
int check(int list[3][3]) {
	int end_check = 0; // 게임 상태 1이 되면 게임 종료.
	int winner = 2; // 승리자 체크 0:유저, 1:플레이어, 2:무승부
	int count = 0;
	for (int i = 0; i < 3; i++) {
		if (list[i][0] == list[i][1] && list[i][1] == list[i][2]) { // 가로줄 검사
			end_check = 1;
			winner = list[i][0];
			break;
		}
		if (list[0][i] == list[1][i] && list[0][i] == list[2][i]) { // 세로줄 검사
			end_check = 1;
			winner = list[0][i];
			break;
		}
	}
	if (list[0][0] == list[1][1] && list[1][1]  == list[2][2]) { // 대각선 1
		end_check = 1;
		winner = list[0][0];
	}
	if (list[0][2] == list[1][1] && list[1][1] == list[2][0]) { // 대각선 2
		end_check = 1;
		winner = list[0][2];
	}

	// 무승부 체크
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			if (list[i][j] < 3)
				count++;
	if(count == 9)
		end_check = 1;


	if (end_check == 1) // 게임이 끝났을 경우
		return winner; // 승자를 반환

	// 게임이 끝나지 않았다면 3을 반환
	return 3;
}

//board 표시 함수
void display(int list[3][3]){
	cout << endl;
	for (int i = 0; i < 3; i++)
	{
		cout << "|---|---|---|\n";
		cout << "| ";
		for (int j = 0; j < 3; j++) {
			if (list[i][j] == 1) cout << "X";
			else if (list[i][j] == 0) cout << "O";
			else cout << " ";
			cout << " | ";
		}
		cout<< endl;
	}
	cout << "|---|---|---|\n";
}

void result() {
	cout << "(1p 기준) 게임 결과" << endl;
	cout << "총게임 : "<< win+draw+lose << endl;
	cout << "승리 : " << win << endl;
	cout << "무승부 : " << draw << endl;
	cout << "패배 : " << lose << endl;
	cout << "승률  : " << win / (double)(win + draw + lose)*100 << "%"<< endl;
}
